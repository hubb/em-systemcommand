{"name":"EM::SystemCommand","body":"# EM::SystemCommand\r\n\r\n`EM::SystemCommand` is an `popen3` abstraction for eventmachine to easily create subprocesses with eventmachine.\r\nThe goal is to provide an easy way to invoke system commands and to read and handle their outputs. When creating an \r\n`EM::SystemCommand` object its basically like a popen. It has `#stdin`, `#stdout` and `#stderr`.\r\nWhich are related to `EM::Connection`.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'em-systemcommand'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install em-systemcommand\r\n\r\n## Usage\r\n\r\nTo simply run a process you can instatiate an `EM::SystemCommand`\r\nobject and set up the callbacks in the yielded block.\r\n\r\n    EM.run do\r\n      EM::SystemCommand 'my_command' do |on|\r\n        on.success do |ps|\r\n          puts \"Success!\"\r\n        end\r\n        \r\n        on.failure do |ps|\r\n          puts \"Failure with status #{ps.status.exitstatus}\"\r\n        end\r\n      end\r\n    end\r\n    \r\nWhen you want to retreive output, you can use the methods\r\n`#update`, `#line` and `#data` on a pipe object like so:\r\n\r\n    EM.run do\r\n      EM::SystemCommand 'my_command' do |on|\r\n        on.success do |ps|\r\n          puts \"Success!\"\r\n        end\r\n        \r\n        on.stdout.data do |data|\r\n          puts \"Data: #{data}\"\r\n        end\r\n        \r\n        on.stdout.line do |line|\r\n          puts \"Line: #{line}\"\r\n        end\r\n        \r\n        # `#output` gets the whole output buffer.\r\n        # This means, it has theoretically the screen youÂ´d get when\r\n        # invoking the command in the shell. Although only \\r is used.\r\n        on.stdout.update do |output|\r\n          puts output\r\n        end\r\n      end\r\n    end\r\n\r\n`Pipe` objects even have a nice convenient method `#match` which lets\r\nyou match output against a regular expression:\r\n\r\n    EM.run do\r\n      EM::SystemCommand 'echo \"25%\\n\"; sleep 1; echo \"50%\\n\"; sleep 1; echo \"75%\\n\"; sleep 1; echo \"100%\\n\"; exit 0;' do |on|\r\n        on.success do |ps|\r\n          puts \"Success!\"\r\n        end\r\n        .\r\n        on.stdout.match /([0-9]+)%/, in: :line do |match, progress|\r\n          puts \"Percentage: #{progress}\"\r\n        end\r\n      end\r\n    end\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","tagline":"Easy handling of system commands and their output.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}